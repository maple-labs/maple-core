version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@1

aliases:
  - &defaults
    docker:
      - image: circleci/node:14

jobs:
  dapp_build:
    docker:
      - image: bakii0499/dapptools:0.1.0
    steps:
      - restore_cache:
          key: nix-deps-02
      - run:
          name: Checkout maple-core
          command: |
            GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone git@github.com:maple-labs/maple-core.git .
            git checkout $CIRCLE_BRANCH
      - run:
          name: Build contracts
          command: |
            GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" dapp update && git submodule update --init --recursive cache/dapp-cache
            export DAPP_LINK_TEST_LIBRARIES=1
            DAPP_SRC="contracts" SOLC_FLAGS="--optimize --optimize-runs 200" dapp --use solc:0.6.11 build
      - persist_to_workspace:
          root: ~/project
          paths:
            - "./*"
      - save_cache:
          paths:
            - /nix/deps/02 # location depends on npm version
          key: nix-deps-02

  dapp_test:
    docker:
      - image: bakii0499/dapptools:0.1.0
    parallelism: 20
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project
      - restore_cache:
          key: nix-deps-02
      - run:
          name: Run unit tests
          command: |
            cd ~/project
            TEST=$(circleci tests glob contracts/**/*.t.sol | circleci tests split --split-by=name)
            ETH_RPC_URL=$ETH_RPC_URL_ALCHEMY ./test-ci.sh $TEST
          no_output_timeout: 60m
  
  integration_test_dependencies:
    <<: *defaults
    steps:
      - run:
          name: Checkout maple-core
          command: |
            GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone git@github.com:maple-labs/maple-core.git
            cd ~/project/maple-core
            git checkout $CIRCLE_BRANCH
            GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git submodule update --init --recursive
      - run:
          name: Checkout maple-deploy
          command: |
            cd ~/project
            GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone git@github.com:maple-labs/maple-deploy.git
      - restore_cache:
          key: v1-npm-deps-{{ checksum "~/project/maple-deploy/package.json" }}
      - run:
          name: Install maple-deploy deps
          command: cd ~/project/maple-deploy && yarn
      - save_cache:
          key: v1-npm-deps-{{ checksum "~/project/maple-deploy/package.json" }}
          paths:
            - ~/project/maple-deploy/node_modules
      - run:
          name: Setup maple-deploy .env
          command: |
            cd ~/project/maple-deploy
            echo "HARDHAT_MNEMONIC=$HARDHAT_MNEMONIC" >> .env
            echo "HARDHAT_FORK_RPC_URL=$HARDHAT_FORK_RPC_URL" >> .env
            echo "HARDHAT_FORK_BLOCK_HEIGHT=11780000" >> .env
            echo "NETWORK=localhost" >> .env
      - run:
          name: Setup maple-deploy symlinks
          command: |
            ln -s ../../../maple-core/contracts ~/project/maple-deploy/hardhat/contracts/core
            ln -s ../../maple-core/lib ~/project/maple-deploy/hardhat/lib
      - persist_to_workspace:
          root: ~/project
          paths:
            - "./*"

  integration_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Start testchain and run hardhat waffle tests
          command: cd ~/project/maple-deploy && ./test-ci.sh

  deploy_kaleido:
    <<: *defaults
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project
      - run:
          name: Update PATH and Define Environment Variable at Runtime
          command: |
            echo 'export MAPLE_KALEIDO_URL=$MAPLE_KALEIDO_URL' >> $BASH_ENV
            echo 'export MAPLE_MNEMONIC=$MAPLE_MNEMONIC' >> $BASH_ENV
            echo 'export NETWORK="kaleido"' >> $BASH_ENV
            echo 'export NODE_ENV="private"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Deploy contracts to Kaleido
          command: cd ~/project && yarn deploy && yarn test
      - persist_to_workspace:
          root: ~/project
          paths:
            - "./*"

  upload_kaleido_artifacts_master:
    executor:
      name: gcp-cli/google
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project
      - gcp-cli/initialize
      - run:
          name: Upload files to gcloud bucket
          command: |
            gsutil -m rsync -r ~/project/packages/contracts/private gs://maple-artifacts/contract-artifacts/kaleido/$CIRCLE_BUILD_NUM
            gsutil -m rsync -r ~/project/packages/contracts/private gs://maple-artifacts/contract-artifacts/kaleido/current

  upload_kaleido_artifacts_develop:
    executor:
      name: gcp-cli/google
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project
      - gcp-cli/initialize
      - run:
          name: Upload files to gcloud bucket
          command: |
            gsutil -m rsync -r ~/project/packages/contracts/private gs://maple-artifacts/contract-artifacts/kaleido/develop

workflows:
  version: 2
  test_all:
    jobs:
      - integration_test_dependencies:
          context: hardhat
      - integration_test:
          context: hardhat
          requires:
            - integration_test_dependencies

      - dapp_build:
          context: seth
      - dapp_test: 
          context: seth
          requires:
            - dapp_build
            
      # - deploy_kaleido:
      #     context: kaleido
      #     requires:
      #       - dapp_test
      #       - integration_test
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - develop
      # - upload_kaleido_artifacts_master:
      #     context: google-cloud
      #     requires:
      #       - deploy_kaleido
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - upload_kaleido_artifacts_develop:
      #     context: google-cloud
      #     requires:
      #       - deploy_kaleido
      #     filters:
      #       branches:
      #         only:
      #           - develop
